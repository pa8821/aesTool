#from XOR import *
from Key import *
import ffield
import numpy as np

class Factory:
    def getObject(self,type,Data):
        if(type=="AES"):
            O = BlockAES(Data)
            return O
        #elif(type=="DES"):         Factory would return other Objects too
        #    O = BlockDES(Data)
        #    return O


class GenericBlock():
    def __init__(self,Data,RorC):
        D = np.array(Data)
        D = D.reshape((4,4))
        if((RorC=='c') or (RorC=='C')):
            D = D.T
        self._Data = D

    def XOR(self,Block2):
        r =[]
        for i,j in zip(self._Data,Block2):
            t = []
            for k in range(0,4):
                t.append(i[k]^j[k])
            r.append(t)

        r = np.array(r)
        self._Data = r
        return self._Data
            
    def getData(self):
        return self._Data

    def ListData(self):
        return self._Data.T.reshape((1,16))[0]

    def encrypt(self):                                      #Abstract Method
        pass

    def decrypt(self):                                      #Abstract Method
        pass

    




class BlockAES(GenericBlock):
    def __init__(self,Data,RorC='C'):
        super().__init__(Data,RorC)

    def decrypt(self,Key):
        for i in range(13,-1,-1):  
            W = Key.getEkey()[(4*i)+4:(4*i+4)+4].T
            self.XOR(W)
            if(i!=13):
                self.inverseMixColumns()
            self.rotRows(True)              #True indicates we're doing inverse rotate rows
            self.subbytes(True)


        self.XOR(Key.getEkey()[0:4].T)
        self._Data = np.array(self._Data)

    def encrypt(self,Key):
        self.XOR(Key.getEkey()[0:4].T)
        for i in range(0,14):        
            W = Key.getEkey()[(4*i)+4:(4*i+4)+4].T
            self.subbytes()
            self.rotRows()
            if(i!=13):
                self.mixColumns()
            self.XOR(W)
        self._Data = np.array(self._Data)


    def subbytes(self,inverse=False):

        sbox = [
        0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
        0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
        0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
        0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
        0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
        0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
        0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
        0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
        0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
        0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
        0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
        0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
        0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
        0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
        0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
        0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
        ]

        sboxInv = [
        0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
        0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
        0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
        0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
        0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
        0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
        0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
        0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
        0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
        0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
        0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
        0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
        0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
        0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
        0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
        0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d
        ]

        t = self.ListData()
        r = []
        

        for i in t:
            if(inverse):
                r.append(sboxInv[i])
            else:
                r.append(sbox[i])

        r = np.array(r)
        r = r.reshape(4,4).T
        
        self._Data = r
        

    def rotRows(self,inverse=False):
        def rotWord(Word,s):
            r = [Word[s%4],Word[(s+1)%4],Word[(s+2)%4],Word[(s+3)%4]]
            return r


        if(inverse):
            n = -1
        else:
            n=1

        t = []
        for j,s in enumerate(self._Data):     
            t.append(rotWord(s,j*n))
        self._Data = np.array(t)

    

    def mixColumns(self):
        b = [[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0]]
        F = ffield.FField(8,0x11B)

        for j in range(0,4):            
            b[0][j] = F.DoMultiply(2,self._Data[0][j]) ^ F.DoMultiply(3,self._Data[1][j]) ^ F.DoMultiply(1,self._Data[2][j]) ^ F.DoMultiply(1,self._Data[3][j])
            b[1][j] = F.DoMultiply(1,self._Data[0][j]) ^ F.DoMultiply(2,self._Data[1][j]) ^ F.DoMultiply(3,self._Data[2][j]) ^ F.DoMultiply(1,self._Data[3][j])
            b[2][j] = F.DoMultiply(1,self._Data[0][j]) ^ F.DoMultiply(1,self._Data[1][j]) ^ F.DoMultiply(2,self._Data[2][j]) ^ F.DoMultiply(3,self._Data[3][j])
            b[3][j] = F.DoMultiply(3,self._Data[0][j]) ^ F.DoMultiply(1,self._Data[1][j]) ^ F.DoMultiply(1,self._Data[2][j]) ^ F.DoMultiply(2,self._Data[3][j])
        
        self._Data = np.array(b)





    def inverseMixColumns(self):
        b = [[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0]]
        F = ffield.FField(8,0x11B)

        for j in range(0,4):                
            b[0][j] = F.DoMultiply(14,self._Data[0][j]) ^ F.DoMultiply(11,self._Data[1][j]) ^ F.DoMultiply(13,self._Data[2][j]) ^ F.DoMultiply(9,self._Data[3][j])
            b[1][j] = F.DoMultiply(9,self._Data[0][j]) ^ F.DoMultiply(14,self._Data[1][j]) ^ F.DoMultiply(11,self._Data[2][j]) ^ F.DoMultiply(13,self._Data[3][j])
            b[2][j] = F.DoMultiply(13,self._Data[0][j]) ^ F.DoMultiply(9,self._Data[1][j]) ^ F.DoMultiply(14,self._Data[2][j]) ^ F.DoMultiply(11,self._Data[3][j])
            b[3][j] = F.DoMultiply(11,self._Data[0][j]) ^ F.DoMultiply(13,self._Data[1][j]) ^ F.DoMultiply(9,self._Data[2][j]) ^ F.DoMultiply(14,self._Data[3][j])

        self._Data = np.array(b)

    

    



    



    